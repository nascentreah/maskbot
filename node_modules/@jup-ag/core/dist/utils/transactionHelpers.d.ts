import { ConfirmedTransactionMeta, Connection, PublicKey, Signer, Transaction, TransactionSignature, VersionedTransaction, VersionedTransactionResponse } from '@solana/web3.js';
export declare function extractTokenBalanceChangeFromTransaction(meta: ConfirmedTransactionMeta, keyMap: Map<string, number>, tokenAccountAddress: PublicKey): number | undefined;
/** Assumption: user is the signer so it can never be rolled */
export declare function extractSOLChangeFromTransaction(meta: ConfirmedTransactionMeta, keyMap: Map<string, number>, user: PublicKey): number;
export declare function getTokenBalanceChangesFromTransactionResponse({ txid, inputMint, outputMint, user, sourceAddress, destinationAddress, transactionResponse, hasWrappedSOL, }: {
    txid: TransactionSignature;
    inputMint: PublicKey;
    outputMint: PublicKey;
    user: PublicKey;
    sourceAddress: PublicKey;
    destinationAddress: PublicKey;
    transactionResponse: VersionedTransactionResponse | null;
    hasWrappedSOL: boolean;
}): Promise<number[]>;
export declare function getUnixTs(): number;
/**
 * awaits confirmation while resending the transaction periodically
 *
 * Our RPC node settings
 * solana_send_leader_count: 8
 * solana_send_retry_ms: 15000
 **/
export declare function transactionSenderAndConfirmationWaiter(connection: Connection, signedTransaction: Transaction | VersionedTransaction, timeout?: number, // 2 minutes, (sendInterval * sendRetries) = 80_000 + extra wait 40_000
pollInterval?: number, sendInterval?: number, sendRetries?: number): Promise<{
    txid: TransactionSignature;
    transactionResponse: VersionedTransactionResponse | null;
}>;
export declare function getSignature(transaction: Transaction | VersionedTransaction): string;
export declare function signTransaction(transaction: Transaction | VersionedTransaction, signers: Signer[]): TransactionSignature;
